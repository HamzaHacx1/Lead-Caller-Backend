// ------------------------------------------------------------------
// Datasource & Client
// ------------------------------------------------------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------------------------------------------------------
// Enums
// ------------------------------------------------------------------
enum LeadStatus {
  NEW
  SCHEDULED
  IN_PROGRESS
  ANSWERED
  VOICEMAIL
  NO_ANSWER
  FAILED
  ERROR
  ARCHIVED
}

enum AttemptOutcome {
  SCHEDULED
  ANSWERED
  VOICEMAIL
  NO_ANSWER
  FAILED
  CANCELED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

// ------------------------------------------------------------------
// Models
// ------------------------------------------------------------------
model Agent {
  id            Int      @id @default(autoincrement())
  name          String
  elevenAgentId String   @unique
  phoneNumberId String
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Lead {
  id            Int             @id @default(autoincrement())
  fbLeadId      String?         @unique
  fullName      String
  email         String?
  phone         String
  timezone      String
  source        String          @default("facebook_lead_ads")
  status        LeadStatus      @default(NEW)
  attempts      Int             @default(0)
  lastOutcome   AttemptOutcome?
  lastAttemptAt DateTime?
  createdUserId Int?
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  callAttempts  CallAttempt[]
  conversations Conversation[]
}

model CallAttempt {
  id             Int            @id @default(autoincrement())
  leadId         Int
  attemptNumber  Int
  status         AttemptOutcome @default(SCHEDULED)
  scheduledAt    DateTime
  startedAt      DateTime?
  endedAt        DateTime?
  // External provider conversation id (keep as-is; not the relation)
  conversationId String?        @unique
  recordingUrl   String?
  transcript     String?
  payload        Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  Lead Lead @relation(fields: [leadId], references: [id])

  // Back-relation for the 1:1 link from Conversation.callAttemptId
  Conversation Conversation? @relation("CallAttemptToConversation")

  @@index([leadId])
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  passwordHash String
  role         String   @default("admin")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// --------------------------- SMS Inbox -----------------------------
model Conversation {
  id           Int      @id @default(autoincrement())
  leadId       Int
  twilioNumber String
  isOpen       Boolean  @default(true)
  lastMsgAt    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Optional 1:1 link to the call attempt that spawned this thread
  callAttemptId Int?         @unique
  CallAttempt   CallAttempt? @relation("CallAttemptToConversation", fields: [callAttemptId], references: [id])

  Lead     Lead      @relation(fields: [leadId], references: [id])
  messages Message[]

  @@index([leadId, twilioNumber])
  @@index([lastMsgAt])
}

model Message {
  id             Int              @id @default(autoincrement())
  conversationId Int
  direction      MessageDirection
  fromNumber     String // E.164
  toNumber       String // E.164
  body           String
  providerSid    String?          @unique // Twilio SMxxxxxxxx
  createdAt      DateTime         @default(now())

  Conversation Conversation @relation(fields: [conversationId], references: [id])
}
